{"version":3,"sources":["map-examples/basic.js","map-examples/without-token.js","app.js","serviceWorker.js","index.js"],"names":["token","process","REACT_APP_MAPBOX_TOKEN","BasicMap","containerRef","useRef","useMapboxGl","style","accessToken","className","ref","language","atomOneDark","customStyle","borderRadius","padding","osmStyle","version","sources","osm","type","tiles","tileSize","layers","id","source","WithoutTokenMap","zoom","center","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6wBAMA,IAiBMA,EACJC,iIAAYC,wBACZ,2FA2BaC,MAzBf,WACE,IAAMC,EAAeC,mBAOrB,OALAC,EAAYF,EAAc,CACxBG,MAAO,qCACPC,YAAaR,IAIb,6BAASS,UAAU,qBACjB,wBAAIA,UAAU,SAAd,aACA,yBAAKA,UAAU,MAAMC,IAAKN,IAC1B,6BACE,kBAAC,IAAD,CACEO,SAAS,aACTJ,MAAOK,IACPC,YAAa,CAAEC,aAAc,MAAOC,QAAS,WArC7C,mVCwCJC,EAAW,CACfC,QAAS,EACTC,QAAS,CACPC,IAAK,CACHC,KAAM,SACNC,MAAO,CACL,mDACA,mDACA,oDAEFC,SAAU,MAGdC,OAAQ,CACN,CACEC,GAAI,MACJC,OAAQ,MACRL,KAAM,YA+BGM,MA1Bf,WACE,IAAMtB,EAAeC,mBAQrB,OANAC,EAAYF,EAAc,CACxBG,MAAOS,EACPW,KAAM,EACNC,OAAQ,CAAC,GAAI,MAIb,6BAASnB,UAAU,qBACjB,wBAAIA,UAAU,SAAd,iBACA,yBAAKA,UAAU,MAAMC,IAAKN,IAC1B,6BACE,kBAAC,IAAD,CACEO,SAAS,aACTJ,MAAOK,IACPC,YAAa,CAAEC,aAAc,MAAOC,QAAS,WA/E7C,mvBCgBKc,MAjBf,WACE,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,aAChB,wBAAIA,UAAU,QACZ,uBAAGqB,KAAK,2CAAR,iBAAoE,IADtE,eAKF,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCJYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.78937a73.chunk.js","sourcesContent":["import React, { useRef } from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport { useMapboxGl } from \"use-mapbox-gl\";\n\nconst code = `import React from \"react\";\nimport { useMapboxGl } from \"use-mapbox-gl\";\n\nfunction BasicMap() {\n  const containerRef = useRef();\n\n  useMapboxGl(containerRef, {\n    style: \"mapbox://styles/mapbox/streets-v11\",\n    accessToken: \"your_access_token\",\n  });\n\n  return <div ref={containerRef} />;\n}\n\nexport default BasicMap\n`;\n\nconst token =\n  process.env.REACT_APP_MAPBOX_TOKEN ||\n  \"pk.eyJ1IjoiZHF1bmJwIiwiYSI6ImNrZjEwNGphNzBuczQyd2xuYng4cjN4MjEifQ.oNhRDejc1ELUrre1pVL4EA\";\n\nfunction BasicMap() {\n  const containerRef = useRef();\n\n  useMapboxGl(containerRef, {\n    style: \"mapbox://styles/mapbox/streets-v11\",\n    accessToken: token,\n  });\n\n  return (\n    <section className=\"container example\">\n      <h2 className=\"title\">Basic Map</h2>\n      <div className=\"map\" ref={containerRef} />\n      <div>\n        <SyntaxHighlighter\n          language=\"javascript\"\n          style={atomOneDark}\n          customStyle={{ borderRadius: \"5px\", padding: \"1.5rem\" }}\n        >\n          {code}\n        </SyntaxHighlighter>\n      </div>\n    </section>\n  );\n}\n\nexport default BasicMap;\n","import React, { useRef } from \"react\";\nimport SyntaxHighlighter from \"react-syntax-highlighter\";\nimport { atomOneDark } from \"react-syntax-highlighter/dist/esm/styles/hljs\";\n\nimport { useMapboxGl } from \"use-mapbox-gl\";\n\nconst code = `import React from \"react\";\nimport { useMapboxGl } from \"use-mapbox-gl\";\n\nconst osmStyle = {\n  version: 8,\n  sources: {\n    osm: {\n      type: \"raster\",\n      tiles: [\n        \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      ],\n      tileSize: 256,\n    },\n  },\n  layers: [\n    {\n      id: \"osm\",\n      source: \"osm\",\n      type: \"raster\",\n    },\n  ],\n};\n\nfunction WithoutTokenMap() {\n  const containerRef = useRef();\n\n  useMapboxGl(containerRef, {\n    style: osmStyle,\n    zoom: 9,\n    center: [30, 50],\n  });\n\n  return <div ref={containerRef} />;\n}\n\nexport default WithoutTokenMap\n`;\n\nconst osmStyle = {\n  version: 8,\n  sources: {\n    osm: {\n      type: \"raster\",\n      tiles: [\n        \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        \"https://c.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n      ],\n      tileSize: 256,\n    },\n  },\n  layers: [\n    {\n      id: \"osm\",\n      source: \"osm\",\n      type: \"raster\",\n    },\n  ],\n};\n\nfunction WithoutTokenMap() {\n  const containerRef = useRef();\n\n  useMapboxGl(containerRef, {\n    style: osmStyle,\n    zoom: 9,\n    center: [30, 50],\n  });\n\n  return (\n    <section className=\"container example\">\n      <h2 className=\"title\">Without token</h2>\n      <div className=\"map\" ref={containerRef} />\n      <div>\n        <SyntaxHighlighter\n          language=\"javascript\"\n          style={atomOneDark}\n          customStyle={{ borderRadius: \"5px\", padding: \"1.5rem\" }}\n        >\n          {code}\n        </SyntaxHighlighter>\n      </div>\n    </section>\n  );\n}\n\nexport default WithoutTokenMap;\n","import React from \"react\";\n\nimport BasicMap from \"./map-examples/basic\";\nimport WithoutToken from \"./map-examples/without-token\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <header className=\"container\">\n        <h1 className=\"logo\">\n          <a href=\"https://github.com/dqunbp/use-mapbox-gl\">use-mapbox-gl</a>{\" \"}\n          react hook\n        </h1>\n      </header>\n      <main>\n        <BasicMap />\n        <WithoutToken />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}